alias qriously-core='cd $QRIOUSLY_HOME/qriously-core'
alias qriously-datascience='cd $QRIOUSLY_HOME/data-science'

alias buildall='mvn clean install -P\!buildUberJar -T 2C -DskipTests'
alias buildall-min='mvn clean install -P!\buildUberJar -T 2C -Dmaven.test.skip=true'
alias buildall-tests='mvn clean install -Punittests -T 2C -P\!buildUberJar -pl \!:qriously-integration-tests'
alias buildall-its='mvn clean install -T 2C -P\!buildUberJar'
alias f='fab -f scripts/fabfile.py'

alias logsh='docker run -ti --rm --volumes-from=data-volumes busybox'
alias hbasest='docker exec -ti hbase-build service hbase-master status'
alias hbasert='docker exec -ti hbase-build service hbase-master restart'

alias startls='fab -f start_local_stack.py start_local_stack'
alias stopls='fab -f start_local_stack.py stop_local_stack'

alias publicip='host myip.opendns.com resolver1.opendns.com'

b64encode() {
    python3 -c "import base64; print(base64.b64encode('$1'.encode('utf-8')).decode().rstrip('='))"
}

b64decode() {
    python3 -c "import base64; print(base64.b64decode('$1'))"
}

numeronym() {
    python3 -c "word='$1'; print(word[0] + str(len(word)-2) + word[-1] if len(word) > 2 else word)"
}

